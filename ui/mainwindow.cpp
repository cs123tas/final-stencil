#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "GL/glew.h"
#include "support/Settings.h"
#include <qgl.h>
#include <QGLFormat>
#include "support/scenegraph/SupportCanvas3D.h"
#include <QFileDialog>
#include <QMessageBox>
#include "support/camera/CamtransCamera.h"
#include "support/lib/CS123XmlSceneParser.h"
#include "support/scenegraph/LSystemTreeScene.h"


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow),
    SEManager(new ShaderEvolutionManager(this))
{
    ui->setupUi(this);
    settings.loadSettingsOrDefaults();
    //You can make changes to the scene now

    //Adding in the 3D canvas...
    QGLFormat qglFormat;
    qglFormat.setVersion(4, 3);
    qglFormat.setProfile(QGLFormat::CoreProfile);
    qglFormat.setSampleBuffers(true);

    m_canvas3D = new SupportCanvas3D(qglFormat, this);
    ui->mainGridLayout->addWidget(m_canvas3D, 0, 0);

    //Filling the UI elements with the current values from the settings global variable
    //(which I'm assuming is set up before this; fingers crossed that that's true)
    ui->useLightingForShaders->setCheckState(settings.useLighting ? Qt::CheckState::Checked : Qt::CheckState::Unchecked);
    ui->usePointLightsForShaders->setCheckState(settings.usePointLights ? Qt::CheckState::Checked : Qt::CheckState::Unchecked);
    ui->mainTabWidget->setCurrentIndex(settings.currentTab);
}

MainWindow::~MainWindow()
{
    delete ui;
}

//Called when the window is closed
void MainWindow::closeEvent(QCloseEvent *event) {
    settings.saveSettings();
    QMainWindow::closeEvent(event);
}


void MainWindow::signalSettingsChanged() {
    //The canvas contains scenes, it'll call settingsChanged in those scenes so don't worry about that
    m_canvas3D->settingsChanged();
}


//If you want users to be able to choose the file,
void MainWindow::fileOpen(QString file) {
    // This opens the 3D tab to initialize OGL so parsing
    // the scene doesn't crash. If you can find a better solution
    // feel free to change this.
    if (!file.isNull()) {
        if (file.endsWith(".xml")) {
            CS123XmlSceneParser parser(file.toLatin1().data());
            if (parser.parse()) {
                // Set up the camera
                CS123SceneCameraData camera;
                if (parser.getCameraData(camera)) {
                    camera.pos[3] = 1;
                    camera.look[3] = 0;
                    camera.up[3] = 0;

                    CameraConfig *cam = m_canvas3D->getCurrentSceneCamtasConfig();
                    cam->look = camera.look;
                    cam->pos = camera.pos;
                    cam->up = camera.up;
                    cam->angle = camera.heightAngle;
                }

                  m_canvas3D->loadSceneFromParser(parser);

//                if (settings.useOrbitCamera) {
//                    ui->cameraOrbitCheckbox->setChecked(false);
//                }

            } else {
                QMessageBox::critical(this, "Error", "Could not load scene \"" + file + "\"");
            }
        }
        else {
//            if (!ui->canvas2D->loadImage(file)) {
//                QMessageBox::critical(this, "Error", "Could not load image \"" + file + "\"");
//            } else {
//            }
             QMessageBox::critical(this, "Error", "We don't support non-xml stuff yettt");
        }
    }
}


//The following funcitons are autogenerated to link UI elements to the C++ backend
//To make one, go to the designer view of our UI, right click a UI element and click
//"Go to slots"

void MainWindow::on_mutateButton_clicked()
{
    SEManager->mutate();
}

void MainWindow::on_renderShadersButton_clicked()
{
    SEManager->renderTestingScene();
}


void MainWindow::on_usePointLightsForShaders_stateChanged(int state)
{
    settings.usePointLights = state == Qt::CheckState::Checked;
    signalSettingsChanged();
}

void MainWindow::on_useLightingForShaders_stateChanged(int state)
{
    settings.useLighting = state == Qt::CheckState::Checked;
    signalSettingsChanged();
}

void MainWindow::on_mainTabWidget_currentChanged(int index)
{
    settings.currentTab = index;
    signalSettingsChanged();
}

void MainWindow::on_renderLTreesbutton_clicked()
{
    fileOpen(QFileDialog::getOpenFileName(this, QString(), "/course/cs123/data/"));
}
